apply plugin: 'com.android.application'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  defaultConfig {
    applicationId "com.vlasquez.androidarchitecture"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "com.vlasquez.androidarchitecture.test.CustomTestRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
  implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
  implementation "com.android.support:design:$supportLibraryVersion"
  implementation "com.android.support:cardview-v7:$supportLibraryVersion"

  /** Dagger **/
  implementation "com.google.dagger:dagger:$daggerVersion"
  implementation "com.google.dagger:dagger-android-support:$daggerVersion"
  annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
  annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

  /** Retrofit **/
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$loggingHttpInterceptorVersion"


  /** Moshi ( Des/Serialization for JSON objects like GSON library) **/
  implementation "com.squareup.moshi:moshi:$moshiVersion"
  annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
  compileOnly "com.ryanharter.auto.value:auto-value-moshi-annotations:$autoValueMoshiVersion"

  /** Autovalue **/
  compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
  annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"

  /** RxJava **/
  implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
  implementation "com.jakewharton.rxrelay2:rxrelay:$rxRelayVersion"

  /** Conductor **/
  implementation "com.bluelinelabs:conductor:$conductorVersion"

  /** Threetenabp **/
  implementation "com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion"

  /** Timber **/
  implementation "com.jakewharton.timber:timber:$timberVersion"

  /** Butterknife **/
  implementation "com.jakewharton:butterknife:$butterknifeVersion"
  annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

  /** Glide **/
  implementation "com.github.bumptech.glide:glide:$glideVersion"

  testImplementation "org.mockito:mockito-core:$mockitoVersion"
  testImplementation 'junit:junit:4.12'

  androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def mockCopySpec = copySpec {
  from rootProject.file('app/')
  include 'mock/'
}

task copyMock('type': Copy) {
  ['src/test/resources', 'src/androidTest/resources'].each { dest ->
    copy {
      with mockCopySpec
      into dest
    }
  }
}

build.finalizedBy(copyMock)
